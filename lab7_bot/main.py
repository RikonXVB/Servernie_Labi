import telebot
import SentimentAnalysis as SA
from collections import defaultdict
import psycopg2
from psycopg2.extras import DictCursor
from config import API_TOKEN
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
import io
import os

DB_CONFIG = {
    'dbname': 'tganalyzer',
    'user': 'postgres',
    'password': 'Vovandrich1337',
    'host': 'localhost',
    'port': '5432'
}

class DatabaseManager:
    def __init__(self, config):
        self.config = config
        self.init_db()

    def get_connection(self):
        return psycopg2.connect(**self.config)

    def init_db(self):
        with self.get_connection() as conn:
            with conn.cursor() as cur:
                
                cur.execute('''
                    CREATE TABLE IF NOT EXISTS user_stats (
                        user_id BIGINT PRIMARY KEY,
                        username TEXT,
                        nickname TEXT,
                        total_messages INTEGER DEFAULT 0,
                        toxic_messages INTEGER DEFAULT 0,
                        positive_messages INTEGER DEFAULT 0,
                        questions_asked INTEGER DEFAULT 0,  -- –¥–ª—è –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞
                        responses_to_others INTEGER DEFAULT 0,  -- –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
                        flood_warnings INTEGER DEFAULT 0,  -- –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                        rule_violations INTEGER DEFAULT 0,  -- –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª
                        last_message_time TIMESTAMP,  -- –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–ª—É–¥–∞
                        toxicity_sum FLOAT DEFAULT 0,
                        positivity_sum FLOAT DEFAULT 0,
                        activity_score FLOAT DEFAULT 0,
                        curiosity_score FLOAT DEFAULT 0,     -- –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
                        responsiveness_score FLOAT DEFAULT 0, -- –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å
                        character_type TEXT,                 -- –¢–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (—Ç–æ–∫—Å–∏—á–Ω—ã–π/–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                    
                    CREATE TABLE IF NOT EXISTS message_history (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES user_stats(user_id),
                        username TEXT,
                        nickname TEXT,
                        message_text TEXT,
                        is_question BOOLEAN DEFAULT FALSE,
                        is_response BOOLEAN DEFAULT FALSE,
                        toxicity_level FLOAT,
                        positivity_level FLOAT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                    
                    CREATE TABLE IF NOT EXISTS user_activity (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES user_stats(user_id),
                        username TEXT,
                        nickname TEXT,
                        activity_type TEXT,
                        activity_value TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                ''')
                conn.commit()

    def save_message(self, user_id, username, nickname, message_text, toxicity_level, positivity_level, is_question, is_response):
        with self.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute('''
                    INSERT INTO message_history (
                        user_id, username, nickname, message_text, toxicity_level, 
                        positivity_level, is_question, is_response
                    )
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', (
                    user_id, username, nickname, message_text, 
                    toxicity_level, positivity_level, is_question, is_response
                ))
                conn.commit()

    def get_user_stats(self, user_id):
        with self.get_connection() as conn:
            with conn.cursor(cursor_factory=DictCursor) as cur:
                cur.execute('''
                    SELECT * FROM user_stats WHERE user_id = %s
                ''', (user_id,))
                return cur.fetchone()

    def update_user_stats(self, user_id, username, nickname, toxicity_level, is_toxic, positivity_level, is_question, is_response, is_flood, characteristics):
        with self.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute('''
                    INSERT INTO user_stats (
                        user_id, username, nickname, total_messages, toxic_messages, 
                        positive_messages, questions_asked, responses_to_others, flood_warnings,
                        toxicity_sum, positivity_sum, curiosity_score, responsiveness_score,
                        character_type, last_message_time
                    )
                    VALUES (%s, %s, %s, 1, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id) DO UPDATE SET
                        username = EXCLUDED.username,
                        nickname = EXCLUDED.nickname,
                        total_messages = user_stats.total_messages + 1,
                        toxic_messages = user_stats.toxic_messages + %s,
                        positive_messages = user_stats.positive_messages + %s,
                        questions_asked = user_stats.questions_asked + %s,
                        responses_to_others = user_stats.responses_to_others + %s,
                        flood_warnings = user_stats.flood_warnings + %s,
                        toxicity_sum = user_stats.toxicity_sum + %s,
                        positivity_sum = user_stats.positivity_sum + %s,
                        curiosity_score = %s,
                        responsiveness_score = %s,
                        character_type = %s,
                        last_message_time = CURRENT_TIMESTAMP
                ''', (
                    user_id, username, nickname,
                    int(is_toxic), 
                    int(positivity_level > 0.3),
                    int(is_question), 
                    int(is_response), 
                    int(is_flood),
                    toxicity_level,
                    positivity_level,
                    characteristics['curiosity_score'],
                    characteristics['responsiveness_score'],
                    characteristics['user_type'][0],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
                    int(is_toxic),
                    int(positivity_level > 0.3),
                    int(is_question),
                    int(is_response),
                    int(is_flood),
                    toxicity_level,
                    positivity_level,
                    characteristics['curiosity_score'],
                    characteristics['responsiveness_score'],
                    characteristics['user_type'][0]
                ))
                conn.commit()

    def get_user_message_history(self, user_id):
        with self.get_connection() as conn:
            with conn.cursor(cursor_factory=DictCursor) as cur:
                cur.execute('''
                    SELECT * FROM message_history 
                    WHERE user_id = %s 
                    ORDER BY created_at DESC
                ''', (user_id,))
                return cur.fetchall()

    def save_user_activity(self, user_id, username, activity_type, activity_value):
        with self.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute('''
                    INSERT INTO user_activity (
                        user_id, username, activity_type, activity_value
                    )
                    VALUES (%s, %s, %s, %s)
                ''', (user_id, username, activity_type, activity_value))
                conn.commit()

def create_user_chart(characteristics):
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    categories = ['–ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å', 
                 '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å']
    
    # –ó–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    values = [
        characteristics['positivity_ratio'],
        characteristics['activity_score'],
        characteristics['responsiveness_score'],
        characteristics['curiosity_score'],
        characteristics['toxicity_level']
    ]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    N = len(categories)
    
    # –£–≥–æ–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    angles = [n / float(N) * 2 * np.pi for n in range(N)]
    angles += angles[:1]
    values += values[:1]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∏—Å—É–Ω–æ–∫
    plt.figure(figsize=(8, 8))
    ax = plt.subplot(111, projection='polar')
    
    # –†–∏—Å—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    ax.plot(angles, values, 'o-', linewidth=2)
    ax.fill(angles, values, alpha=0.25)
    
    # –ù–∞—Å—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories)
    ax.set_ylim(0, 1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    ax.grid(True)
    
    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    ax.set_facecolor('white')
    plt.gcf().patch.set_facecolor('white')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

bot = telebot.TeleBot(API_TOKEN)
analyzer = SA.MessageAnalyzer()
db = DatabaseManager(DB_CONFIG)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∏—á–Ω–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type == 'private':
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "üîπ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "3. –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ –≥—Ä—É–ø–ø–µ\n\n"
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"
        )
    else:
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—á–∞–ª –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n"
            "ü§ñ –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
            "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    bot.send_message(message.chat.id, welcome_text)

@bot.message_handler(commands=['help'])
def send_help(message):
    if message.chat.type == 'private':
        help_text = (
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "/generate_profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–∏–∞–≥—Ä–∞–º–º–æ–π\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    else:
        help_text = (
            "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/generate - –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n"
            "/top_active - –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏\n"
            "/top_positive - –°–∞–º—ã–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏\n"
            "/report - –û—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö"
        )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['profile'])
def send_profile(message):
    username = message.from_user.username or message.from_user.first_name or str(message.from_user.id)
    user_id = message.from_user.id
    stats = db.get_user_stats(user_id)
    message_history = db.get_user_message_history(user_id)
    
    if not stats or stats['total_messages'] == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    characteristics = analyzer.analyze_user_characteristics(stats, message_history)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    days_active = max(1, (datetime.now() - stats['created_at']).days)
    msgs_per_day = stats['total_messages'] / days_active
    
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n\n"
        f"üí≠ –ü–æ—Ä—Ç—Ä–µ—Ç: {characteristics['user_type'][0]}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üü¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {characteristics['toxicity_level']:.2f}\n"
        f"üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å: {characteristics['positivity_ratio']:.2f}\n"
        f"‚ùì –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ: {characteristics['curiosity_score']:.2f}\n"
        f"üë• –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å: {characteristics['responsiveness_score']:.2f}\n"
        f"‚ö° –ß–∞—Å—Ç–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {characteristics['flood_score']:.2f}\n\n"
        f"üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {days_active}\n"
        f"üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {msgs_per_day:.1f}\n"
        f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}"
    ).encode('utf-8').decode('utf-8')
    
    bot.reply_to(message, profile_text)

@bot.message_handler(commands=['stats'])
def send_stats(message):
    username = message.from_user.username or message.from_user.first_name or str(message.from_user.id)
    user_id = message.from_user.id
    stats = db.get_user_stats(user_id)
    message_history = db.get_user_message_history(user_id)
    
    if not stats or stats['total_messages'] == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    characteristics = analyzer.analyze_user_characteristics(stats, message_history)
    
    response = (
        f"üìä –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}:\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        f"üí≠ –¢–∏–ø –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—è: {', '.join(characteristics['user_type'])}\n\n"
        f"üìà –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {characteristics['activity_score']:.2f}/1.0\n"
        f"‚ñ´Ô∏è –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å: {characteristics['positivity_ratio']:.2f}/1.0\n"
        f"‚ñ´Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {characteristics['toxicity_level']:.2f}/1.0\n"
        f"‚ñ´Ô∏è –õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {characteristics['curiosity_score']:.2f}/1.0\n"
        f"‚ñ´Ô∏è –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å: {characteristics['responsiveness_score']:.2f}/1.0\n"
    ).encode('utf-8').decode('utf-8')
    
    if characteristics['flood_score'] > 0:
        response += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞ —Ñ–ª—É–¥: {stats['flood_warnings']}\n"
    if characteristics['rule_violations_ratio'] > 0:
        response += f"üö´ –ù–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª: {stats['rule_violations']}\n"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['generate'])
def send_chart(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(message.from_user.id)
    stats = db.get_user_stats(user_id)
    message_history = db.get_user_message_history(user_id)
    
    if not stats or stats['total_messages'] == 0:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æÔøΩÔøΩ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    characteristics = analyzer.analyze_user_characteristics(stats, message_history)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    chart = create_user_chart(characteristics)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    bot.send_photo(
        message.chat.id,
        photo=chart,
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=['generate_profile'])
def generate_profile(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(message.from_user.id)
    stats = db.get_user_stats(user_id)
    message_history = db.get_user_message_history(user_id)
    
    if not stats or stats['total_messages'] == 0:
        no_data_text = (
            "üëã –Ø –ø–æ–∫–∞ –Ω–µ –≤–∏–∂—É –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "3. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å! üìä"
        )
        bot.reply_to(message, no_data_text)
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    characteristics = analyzer.analyze_user_characteristics(stats, message_history)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    chart = create_user_chart(characteristics)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n\n"
        f"üí≠ –•–∞—Ä–∞–∫—Ç–µ—Ä: {characteristics['user_type'][0]}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üü¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {characteristics['toxicity_level']:.2f}\n"
        f"üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å: {characteristics['positivity_ratio']:.2f}\n"
        f"‚ùì –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ: {characteristics['curiosity_score']:.2f}\n"
        f"üë• –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å: {characteristics['responsiveness_score']:.2f}\n"
        f"‚ö° –ß–∞—Å—Ç–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {characteristics['flood_score']:.2f}\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}"
    ).encode('utf-8').decode('utf-8')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ç–µ–∫—Å—Ç–æ–º
    bot.send_photo(
        message.chat.id,
        photo=chart,
        caption=profile_text,
        reply_to_message_id=message.message_id
    )

@bot.message_handler(content_types=['text'])
def send_response(message):
    user_id = message.from_user.id
    username = message.from_user.username
    nickname = message.from_user.first_name
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª—É–¥–∞
    user_history = db.get_user_message_history(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
    is_reply = message.reply_to_message is not None
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    analysis = analyzer.analyze_message(message.text, user_history)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = db.get_user_stats(user_id)
    if stats:
        characteristics = analyzer.analyze_user_characteristics(stats, user_history)
    else:
        characteristics = {
            'curiosity_score': 0.0,
            'responsiveness_score': 0.0,
            'user_type': ['–Ω–µ–π—Ç—Ä–∞–ª–Ω—ã–π']
        }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_toxic = analysis['toxicity'] > 0.7
    db.update_user_stats(
        user_id,
        username,
        nickname,
        analysis['toxicity'],
        is_toxic,
        analysis['positivity'],
        analysis['is_question'],
        is_reply,
        analysis['is_flood'],
        characteristics
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    db.save_message(
        user_id,
        username,
        nickname,
        message.text,
        analysis['toxicity'],
        analysis['positivity'],
        analysis['is_question'],
        is_reply
    )

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
bot.polling(none_stop=True)
